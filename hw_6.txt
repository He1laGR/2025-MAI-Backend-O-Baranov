# Домашнее задание №6: Контейнеризация приложения

## 1. Установка необходимых компонентов
- Установлен Docker
- Установлен Docker Compose
- Проверка версий:
  ```bash
  docker --version
  docker-compose --version
  ```

## 2. Dockerfile для FastAPI приложения
Создан Dockerfile со следующими характеристиками:
- Базовый образ: python:3.11-slim
- Установка системных зависимостей для работы с PostgreSQL
- Копирование и установка Python-зависимостей из requirements.txt
- Настройка рабочей директории и прав доступа
- Запуск приложения через Gunicorn с воркером Uvicorn
- Порт 8000 для FastAPI

## 3. Docker Compose конфигурация
Создан docker-compose.yml с тремя сервисами:

1. nginx:
   - Образ: nginx:1.24
   - Порт: 80
   - Проксирование запросов к FastAPI
   - Настроен через upstream gunicorn
   - Обслуживание статических файлов

2. app (FastAPI):
   - Собственный образ из Dockerfile
   - Порт: 8000
   - Подключение к БД через переменные окружения
   - Автоматическое создание таблиц при старте

3. db (PostgreSQL):
   - Образ: postgres:15
   - Persistent volume для данных
   - Настройка через переменные окружения

## 4. Makefile
Создан Makefile с основными командами:

1. Основные команды:
   ```bash
   make init    # Первый запуск (build + up + migrate)
   make build   # Сборка образов
   make up      # Запуск контейнеров
   make down    # Остановка контейнеров
   make clean   # Полная очистка
   ```

2. Вспомогательные команды:
   ```bash
   make ps      # Статус контейнеров
   make logs    # Просмотр логов
   ```

## Инструкция по запуску

1. Клонирование репозитория:
   ```bash
   git clone <repository-url>
   cd <project-directory>
   ```

2. Запуск проекта:
   ```bash
   make init
   ```
   Это выполнит:
   - Сборку Docker образов
   - Запуск контейнеров
   - Создание таблиц в БД

3. Проверка работоспособности:
   ```bash
   make ps      # Проверка статуса контейнеров
   make logs    # Просмотр логов
   ```

4. Тестирование API:
   - Web-интерфейс: http://localhost/web/
   - API endpoints: http://localhost/api/
   - Примеры API запросов:
     ```bash
     curl http://localhost/api/posts
     curl http://localhost/api/categories
     ```

## Структура проекта
- Dockerfile - сборка FastAPI приложения
- docker-compose.yml - конфигурация контейнеров
- Makefile - команды управления
- config/nginx.conf - конфигурация Nginx
- requirements.txt - Python зависимости
- src/ - исходный код приложения

## Результат
- Приложение успешно контейнеризировано
- Все компоненты (Nginx, FastAPI, PostgreSQL) работают в отдельных контейнерах
- Настроено проксирование запросов через Nginx
- Реализован простой процесс развертывания через make-команды
- Данные БД сохраняются между перезапусками в Docker volume 